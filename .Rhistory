for(i in 1:n_sim){
sol_exact=AUX(locs[[j]][,1],locs[[j]][,2])
data = sol_exact + rnorm(n_obs[j], mean=0, sd=0.05*abs(diff(range(sol_exact))))
#### Test 1.2: grid with exact GCV
output_CPP<-smooth.FEM(observations=data, locations = locs[[j]], FEMbasis=FEMbasis, lambda=lambda,
lambda.selection.criterion='grid', DOF.evaluation='exact', lambda.selection.lossfunction='GCV')
DE_PDE$update_estimate(output_CPP$fit.FEM, i,j)
DE_PDE$update_error(true_field=sol_exact, test_locs=locs[[j]], i,j)
DE_PDE2$update_estimate(output_CPP$fit.FEM, i,j)
DE_PDE2$update_error(true_field=sol_exact, test_locs=locs[[j]], i,j)
}
DE_PDE$compute_mean_field(j)
DE_PDE2$compute_mean_field(j)
}
DE_PDE$plot_mean_field(1L)
DE_PDE$plot_mean_field(2L)
DE_PDE2$plot_mean_field(1L)
DE_PDE2$plot_mean_field(2L)
title.size <- 26
MyTheme <- theme(
axis.text = element_text(size=title.size-5),
axis.title = element_text(size=title.size),
title = element_text(size=title.size),
plot.title = element_text(hjust = 0.5),
legend.text = element_text(size=title.size-5),
legend.key.size = unit(1,"cm"),
legend.key.height = unit(1,"cm"),
legend.title = element_blank(),
legend.background = element_rect(fill="white", color="black",
linewidth =c(1,0.5))
)
boxplot(DE_PDE) + MyTheme
boxplot(DE_PDE2) + MyTheme
plot(FEM)
library(viridis)
plot(FEM, linewidth=2) + scale_color_viridis()
BLOCK <- BlockSimulation(list(DE_PDE, DE_PDE2))
boxplot(BLOCK)
{
library(colorspace)
begin=0.25
end=0.95
border_col = darken(viridis(length(BLOCK$method_names), begin=begin,end=end), amount=0.25)
fill_col = viridis(length(BLOCK$method_names), begin=begin, end=end)
BORDER = c()
FILL = c()
for(i in 1:length(BLOCK$method_names)){
FILL = append(FILL, fill_col[i])
BORDER = append(BORDER, border_col[i])
}
ggFILL <-scale_fill_manual(values = FILL)
ggBORDER <- scale_color_manual(values= BORDER)
}
boxplot(BLOCK) + ggFILL + ggBORDER
boxplot(BLOCK) + ggFILL + ggBORDER + labs(title="ciao") +  MyTheme
### Case Study ############################
locs <- fdaPDE::refine.by.splitting.mesh.1.5D(mesh)$nodes
colnames(locs) <- c("x","y")
locs <- as.data.frame(locs)
source("CaseStudy.R")
K <- 3
KfoldObj <- KfoldsCrossValidation(locs,seed=3145L, K=3L)
DE_PDE <- DensityEstimationCaseStudy(method_name = "DE-PDE",n_obs = KfoldObj$num_obs_kFold, FEMbasis = FEMbasis)
DE_PDE2 <- DensityEstimationCaseStudy(method_name = "DE-PDE2",n_obs = KfoldObj$num_obs_kFold, FEMbasis = FEMbasis)
lambda = 10^seq(from=-6, to=-3,length.out = 10)
for(j in 1:K){
tmp = KfoldObj$get_data(j)
train_data = tmp$train_data
test_data = tmp$test_data
output_CPP = fdaPDE::DE.FEM(data = cbind(train_data$x, train_data$y), FEMbasis = FEMbasis,
lambda = lambda,
preprocess_method ="RightCV",
nfolds = 10)
DE_PDE$update_estimate(estimate = FEM(exp(output_CPP$g), FEMbasis),j = j)
DE_PDE$update_error(test_locs = test_data, j=j)
DE_PDE$compute_mean_field(j)
DE_PDE2$update_estimate(estimate = FEM(exp(output_CPP$g), FEMbasis),j = j)
DE_PDE2$update_error(test_locs = test_data, j=j)
DE_PDE2$compute_mean_field(j)
}
boxplot(DE_PDE) + MyTheme
BLOCK_CASE_STUDY <- BlockCaseStudy(c(DE_PDE,DE_PDE2))
boxplot(BLOCK_CASE_STUDY)
{
library(colorspace)
begin=0.25
end=0.95
border_col = darken(viridis(length(BLOCK$method_names), begin=begin,end=end), amount=0.25)
fill_col = viridis(length(BLOCK$method_names), begin=begin, end=end)
BORDER = c()
FILL = c()
for(i in 1:length(BLOCK$method_names)){
FILL = append(FILL, fill_col[i])
BORDER = append(BORDER, border_col[i])
}
ggFILL <-scale_fill_manual(values = FILL)
ggBORDER <- scale_color_manual(values= BORDER)
}
boxplot(BLOCK_CASE_STUDY) + ggFILL + ggBORDER
### SE VOLESSIMO INVERTIRE ORDINE
x <- BLOCK_CASE_STUDY$results
x
order_ <- sort(unique(x$method),decreasing = T)
x$method <- factor(x$method, levels=order_)
p<-ggplot(x)+
geom_boxplot(aes( x=method, y=errors, group=interaction(method),
fill=method, color=method))+
scale_x_discrete(limits=order_)+
labs(x="", y="") +
theme(
axis.ticks.x = element_blank(),
legend.position = "none")
p
{
library(colorspace)
begin=0.95 # 0.25
end=0.25   # 0.95
border_col = darken(viridis(length(order_), begin=begin,end=end), amount=0.25)
fill_col = viridis(length(order_), begin=begin, end=end)
BORDER = c()
FILL = c()
for(i in 1:length(order_)){
FILL = append(FILL, fill_col[i])
BORDER = append(BORDER, border_col[i])
}
ggFILL <-scale_fill_manual(values = FILL)
ggBORDER <- scale_color_manual(values= BORDER)
}
p + ggFILL + ggBORDER
setwd("/media/aldo/FLASH DRIVE/simulation_1")
install.packages("TDA")
## OTHER LIBRARIES -------------------------------------------------------------
library(mvtnorm)      # Library for multivariate Gaussian distributions
library(stam)         # Library for Spatio-Temporal Kernel Density Estimation (STKDE)
install.packages("stam")
install.packages("gss")
library(lgcp)         # Library for Log-Gaussian Cox Processes (LGCP)
library(lgcp)         # Library for Log-Gaussian Cox Processes (LGCP)
remove.packages("lgcp")
install.packages("lgcp")
install.packages("rgdal", type = "source", configure.args = c("--with-proj-lib=$(brew --prefix)/lib/", "--with-proj-include=$(brew --prefix)/include/"))
install.packages("lgcp")
graphics.off()
rm(list=ls())
setwd("~/Desktop/LN-DE-PDE")
source("utils.R")
source("settings.R")
tests.names = c("test_1", "test_2")
ntest = 1
# available domains
domains = c("simplenet", "ontario")
source("utils.R")
source("settings.R")
tests.names = c("test_1", "test_2")
ntest = 1
# available domains
domains = c("estevan", "ontario",  "simplenet")
methods.names = c("SR-PDE", "Lattice", "GWR", "RR-Krig")
methods = c(T,T,T,T)
# Fixing domain ----------------------------------------------------------------
sett = setting(domains[ntest])
library(GWmodel)
library(spam)
library(rgeos)
library(igraph)
library(shp2graph)
library(maptools)
library(spatstat)
library(fdaPDE)
library(spatstat)
# Fixing domain ----------------------------------------------------------------
sett = setting(domains[ntest])
mesh = sett$mesh
FEMbasis = sett$FEMbasis
nnodes = sett$nnodes
spatstat.linnet = sett$spatstat.linnet
plot(mesh,pch=".");
dim(mesh$nodes)
setting <-function(network = "" ){
if(network == "ontario"){
data("ORN")
mesh = as.fdaPDE.SpatialLinesDataFrame(ORN.nt)
mesh = normalize_mesh_unit(mesh)$mesh
FEMbasis = create.FEM.basis(mesh)
nnodes = nrow(mesh$nodes)
spatstat.linnet = as.spatstat.linnet.fdaPDE(mesh)
res = list(mesh = mesh, FEMbasis=FEMbasis, nnodes = nnodes,
spatstat.linnet = spatstat.linnet)
return(res)
}else if( network == "estevan"){
data("ERN_OSM_correct")
mesh = as.fdaPDE.SpatialLinesDataFrame(ERN_OSM_cor.nt)
mesh = normalize_mesh_unit(mesh)$mesh
mesh = refine.mesh.1.5D(mesh, delta=0.125)
FEMbasis = create.FEM.basis(mesh)
nnodes = nrow(mesh$nodes)
spatstat.linnet = as.spatstat.linnet.fdaPDE(mesh)
res = list(mesh = mesh, FEMbasis=FEMbasis, nnodes = nnodes,
spatstat.linnet = spatstat.linnet)
}else if(network=="simplenet"){
data("simplenet")
mesh = as.fdaPDE.spatstat.linnet(simplenet)
mesh = refine.mesh.1.5D(mesh,0.025)
FEMbasis = create.FEM.basis(mesh)
nnodes = nrow(mesh$nodes)
spatstat.linnet = as.spatstat.linnet.fdaPDE(mesh)
res = list(mesh=mesh, FEMbasis = FEMbasis, nnodes=nnodes,
spatstat.linnet = spatstat.linnet)
}
}
# Fixing domain ----------------------------------------------------------------
sett = setting(domains[ntest])
mesh = sett$mesh
FEMbasis = sett$FEMbasis
nnodes = sett$nnodes
spatstat.linnet = sett$spatstat.linnet
plot(mesh,pch=".");
source("plot.R")
plot(mesh)
plot(mesh, linewidth=1.5)
plot(mesh, linewidth=1.25)
plot(mesh, linewidth=1.05)
plot(mesh, linewidth=0.75)
# test locations
locs.test = spatstat::runiflpp(1000, spatstat.linnet)
# test locations
locs.test = spatstat.linnet::::runiflpp(1000, spatstat.linnet)
# test locations
locs.test = spatstat.linnet::runiflpp(1000, spatstat.linnet)
locs.test = cbind(locs.test$data$x, locs.test$data$y)
# number of simulations
nsim =  20
# aux_test is defined in settings.R
sample.idx =c(2378, 1271, 1802, 1529, 2693)
field =   aux_test_regression(ND_,source = 63, sigma=2)
aux_density = auxiliary_test
f.exp = function(ND,source=63,sigma=0.125){
nnodes = nrow(ND)
res = vector(mode="numeric", length=nnodes)
source.1 = source
distances.1 = ND[source.1,]
other.1 = vector(mode="integer")
for(i in 1:nnodes ){
res[i] = exp(-distances.1[i]/sigma)
}
return(res)
}
aux_test_regression =f.exp
f.sin = function(ND,source=63,sigma=1e-5){
#sigma = 0.125/24
nnodes = nrow(ND)
res = vector(mode="numeric", length=nnodes)
source.1 = source
distances.1 = ND[source.1,]
other.1 = vector(mode="integer")
for(i in 1:nnodes){
res[i] = sin(2*pi*distances.1[i]/sigma)*cos(2*pi*distances.1[i]/sigma)
}
return(res)
}
aux_test_regression_cov = f.sin
# aux_test is defined in settings.R
sample.idx =c(2378, 1271, 1802, 1529, 2693)
field =   aux_test_regression(ND_,source = 63, sigma=2)
# aux_test is defined in settings.R
sample.idx =c(63, 150, 300, 400)
compute_dist_matrix(points1, points2, L){
compute_dist_matrix = function(points1, points2, L){
lpp1 <- as.LPP(points1)
lpp1 <- as.LPP(points2)
return( crossdist.lpp(lpp1,lpp2) )
}
# in ../utils.R
ND_ = compute_dist_matrix(mesh$nodes, mesh$nodes, L=spatstat.linnet)
is.linnet(spatstat.linnet)
# in ../utils.R
ND_ = compute_dist_matrix(points1= mesh$nodes, points2 = mesh$nodes, L =spatstat.linnet)
compute_dist_matrix = function(points1, points2, L){
lpp1 <- as.LPP(points1, L)
lpp1 <- as.LPP(points2, L)
return( crossdist.lpp(lpp1,lpp2) )
}
# in ../utils.R
ND_ = compute_dist_matrix(points1= mesh$nodes, points2 = mesh$nodes, L =spatstat.linnet)
compute_dist_matrix = function(points1, points2, L){
lpp1 <- as.LPP(points1, L)
lpp2 <- as.LPP(points2, L)
return( crossdist.lpp(lpp1,lpp2) )
}
# in ../utils.R
ND_ = compute_dist_matrix(points1= mesh$nodes, points2 = mesh$nodes, L =spatstat.linnet)
# aux_test is defined in settings.R
sample.idx =c(63, 150, 300, 400)
field =   aux_test_regression(ND_,source = sample.idx[1], sigma=2)
field.2 = aux_test_regression(ND_,source = sample.idx[2], sigma=1.5)
field.3 = aux_test_regression(ND_,source = sample.idx[3], sigma=2)
field.4 = aux_test_regression(ND_,source = sample.idx[5], sigma=1.5)
field = field + field.2 + field.3 + field.4
plot(FEM(field, FEMbasis))
range(field)
class(ND_)
dim(ND_)
field
ND_
points1 <- points2 <- mesh$nodes
lpp1 <- as.LPP(points1, L)
L = spatstat.linnet
lpp1 <- as.LPP(points1, L)
plot(lpp1)
plot(lpp2)
lpp2 <- as.LPP(points2, L)
plot(lpp2)
ND <- crossdist.lpp(lpp1,lpp2)
range(ND)
compute_dist_matrix = function(points1, points2, L){
lpp1 <- as.LPP(points1, L)
lpp2 <- as.LPP(points2, L)
ND <- crossdist.lpp(lpp1,lpp2)
return( ND )
}
# in ../utils.R
ND_ = compute_dist_matrix(points1= mesh$nodes,
points2 = mesh$nodes,
L =spatstat.linnet)
dim(ND_)
range(ND_)
# aux_test is defined in settings.R
sample.idx =c(63, 150, 300, 400)
field =   aux_test_regression(ND_,source = sample.idx[1], sigma=2)
field.2 = aux_test_regression(ND_,source = sample.idx[2], sigma=1.5)
field.3 = aux_test_regression(ND_,source = sample.idx[3], sigma=2)
field.4 = aux_test_regression(ND_,source = sample.idx[5], sigma=1.5)
field = field + field.2 + field.3 + field.4
plot(FEM(field, FEMbasis))
range(field)
aux_test_regression(ND, source=65, sigma=0.125)
sample.idx
sample.idx[1]
aux_test_regression(ND_,source = sample.idx[1], sigma=2)
aux_test_regression(ND_,source = sample.idx[2], sigma=1.5)
aux_test_regression(ND_,source = sample.idx[3], sigma=2)
range(field)
field =   aux_test_regression(ND_,source = sample.idx[1], sigma=2)
field.2 = aux_test_regression(ND_,source = sample.idx[2], sigma=1.5)
field.3 = aux_test_regression(ND_,source = sample.idx[3], sigma=2)
field.4 = aux_test_regression(ND_,source = sample.idx[5], sigma=1.5)
field = field + field.2 + field.3 + field.4
field.4 = aux_test_regression(ND_,source = sample.idx[4], sigma=1.5)
field =   aux_test_regression(ND_,source = sample.idx[1], sigma=2)
field.2 = aux_test_regression(ND_,source = sample.idx[2], sigma=1.5)
field.3 = aux_test_regression(ND_,source = sample.idx[3], sigma=2)
field.4 = aux_test_regression(ND_,source = sample.idx[4], sigma=1.5)
field = field + field.2 + field.3 + field.4
plot(FEM(field, FEMbasis))
plot(FEM(field, FEMbasis), linewidth=0.75) + + scale_color_viridis()
plot(FEM(field, FEMbasis), linewidth=0.75)  + scale_color_viridis()
# aux_test is defined in settings.R
sample.idx =c(63, 150, 300, 400)
field =   aux_test_regression(ND_,source = sample.idx[1], sigma=2)
field.2 = aux_test_regression(ND_,source = sample.idx[2], sigma=1.5)
field = field + field.2 + field.3 #+ field.4
plot(FEM(field, FEMbasis), linewidth=0.75)  + scale_color_viridis()
field = field + field.2 + field.4 +#+ field.3
plot(FEM(field, FEMbasis), linewidth=0.75)  + scale_color_viridis()
field = field + field.2 + field.4 #+ field.3
plot(FEM(field, FEMbasis), linewidth=0.75)  + scale_color_viridis()
# aux_test is defined in settings.R
sample.idx =c(63, 150, 300, 400)
field =   aux_test_regression(ND_,source = sample.idx[1], sigma=2)
field.2 = aux_test_regression(ND_,source = sample.idx[2], sigma=1.5)
#field.3 = aux_test_regression(ND_,source = sample.idx[3], sigma=2)
field.4 = aux_test_regression(ND_,source = sample.idx[4], sigma=1.5)
field = field + field.2 + field.4 #+ field.3
plot(FEM(field, FEMbasis), linewidth=0.75)  + scale_color_viridis()
field = field  + field.4 + field.3
# aux_test is defined in settings.R
sample.idx =c(63, 150, 300, 400)
field =   aux_test_regression(ND_,source = sample.idx[1], sigma=2)
#field.2 = aux_test_regression(ND_,source = sample.idx[2], sigma=1.5)
field.3 = aux_test_regression(ND_,source = sample.idx[3], sigma=2)
field.4 = aux_test_regression(ND_,source = sample.idx[4], sigma=1.5)
field = field  + field.4 + field.3
plot(FEM(field, FEMbasis), linewidth=0.75)  + scale_color_viridis()
field =   aux_test_regression(ND_,source = sample.idx[1], sigma=2)
#field.2 = aux_test_regression(ND_,source = sample.idx[2], sigma=1.5)
field.3 = aux_test_regression(ND_,source = sample.idx[3], sigma=2)
field.4 = aux_test_regression(ND_,source = sample.idx[4], sigma=1.5)
plot(FEM(field, FEMbasis), linewidth=0.75)  + scale_color_viridis()
field =   aux_test_regression(ND_,source = sample.idx[1], sigma=2)
plot(FEM(field, FEMbasis), linewidth=0.75)  + scale_color_viridis()
field.2 = aux_test_regression(ND_,source = sample.idx[2], sigma=1.5)
plot(FEM(field.2, FEMbasis), linewidth=0.75)  + scale_color_viridis()
field.3 = aux_test_regression(ND_,source = sample.idx[3], sigma=2)
plot(FEM(field.3, FEMbasis), linewidth=0.75)  + scale_color_viridis()
field.4 = aux_test_regression(ND_,source = sample.idx[4], sigma=1.5)
plot(FEM(field.4, FEMbasis), linewidth=0.75)  + scale_color_viridis()
field = field  + field.4
plot(FEM(field, FEMbasis), linewidth=0.75)  + scale_color_viridis()
field.4 = aux_test_regression(ND_,source = sample.idx[4], sigma=0.75)
plot(FEM(field.4, FEMbasis), linewidth=0.75)  + scale_color_viridis()
field = field  + field.4
true_signal = field  + field.4
plot(FEM(true_signal, FEMbasis), linewidth=0.75)  + scale_color_viridis()
true_signal = field  + field.4
plot(FEM(true_signal, FEMbasis), linewidth=0.75)  + scale_color_viridis()
field =   aux_test_regression(ND_,source = sample.idx[1], sigma=2)
plot(FEM(field, FEMbasis), linewidth=0.75)  + scale_color_viridis()
field.4 = aux_test_regression(ND_,source = sample.idx[4], sigma=0.75)
plot(FEM(field.4, FEMbasis), linewidth=0.75)  + scale_color_viridis()
true_signal = field  + field.4
plot(FEM(true_signal, FEMbasis), linewidth=0.75)  + scale_color_viridis()
field.4 = aux_test_regression(ND_,source = sample.idx[4], sigma=0.5)
plot(FEM(field.4, FEMbasis), linewidth=0.75)  + scale_color_viridis()
true_signal = field  + field.4
plot(FEM(true_signal, FEMbasis), linewidth=0.75)  + scale_color_viridis()
field =   aux_test_regression(ND_,source = sample.idx[1], sigma=1.5)
plot(FEM(field, FEMbasis), linewidth=0.75)  + scale_color_viridis()
field.4 = aux_test_regression(ND_,source = sample.idx[4], sigma=0.5)
plot(FEM(field.4, FEMbasis), linewidth=0.75)  + scale_color_viridis()
true_signal = field  + field.4
plot(FEM(true_signal, FEMbasis), linewidth=0.75)  + scale_color_viridis()
date_ = gsub(":","_",gsub(" ","-",Sys.time()))
if(!dir.exists("data/")) {
dir.create("data/")
}
tests.names
ntest
if( !dir.exists(paste("data/", tests.names[ntest],"/",sep=""))){
dir.create(paste("data/", tests.names[ntest],"/",sep=""))
}
folder.name = paste("data/", tests.names[ntest],"/",date_,"/",sep="")
if(!dir.exists(folder.name)) {
dir.create(folder.name)
}
X = matrix(nrow=nnodes, ncol=2)
X[,1] = rnorm(nnodes, mean=0.5,sd=0.25)
X[,2] = 1/4*aux_test_regression_cov(ND_, source=63, sigma=7.5) #2.5
betas=c(1.,1.)
plot(FEM(X[,2], FEMbasis))
true_signal = field + W%*%betas
true_signal = field + X%*%betas
plot(FEM(true_signal, FEMbasis))
X[,2] = 1/4*aux_test_regression_cov(ND_, source=sample.idx[1], sigma=10) #2.5
true_signal = field + X%*%betas
plot(FEM(true_signal, FEMbasis))
plot(FEM(true_signal, FEMbasis), linewidth=2) + scale_color_viridis()
plot(FEM(true_signal, FEMbasis), linewidth=0.75) + scale_color_viridis()
X[,2] = 1/4*aux_test_regression_cov(ND_, source=sample.idx[1], sigma=20) #2.5
plot(FEM(X[,2], FEMbasis))
plot(FEM(X[,2], FEMbasis)) + scale_color_viridis()
X[,2] = aux_test_regression_cov(ND_, source=sample.idx[1], sigma=20) #2.5
plot(FEM(X[,2], FEMbasis),linewidth=0.75) + scale_color_viridis()
X[,2] = aux_test_regression_cov(ND_, source=sample.idx[1], sigma=15) #2.5
plot(FEM(X[,2], FEMbasis),linewidth=0.75) + scale_color_viridis()
X[,2] = aux_test_regression_cov(ND_, source=sample.idx[1], sigma=10) #2.5
plot(FEM(X[,2], FEMbasis),linewidth=0.75) + scale_color_viridis()
betas=c(1.,1.)
true_signal = field + X%*%betas
plot(FEM(true_signal, FEMbasis), linewidth=0.75) + scale_color_viridis()
source("Simulation.R")
n_obs = c(50, 75, 100, 150)
n_obs = as.integer(c(50, 75, 100, 150))
n_obs
is.integer(n_obs)
method_names = c("SR-PDE", "Lattice", "GWR", "RR-Krig")
method_names[2]
SR_PDE <- SpatialRegressionSimulation(method_name=method_names[1],
n_obs = n_obs, n_sim = n_sim,
FEMbasis = FEMbasis)
nsim
n_sim = 20L
SR_PDE <- SpatialRegressionSimulation(method_name=method_names[1],
n_obs = n_obs, n_sim = n_sim,
FEMbasis = FEMbasis)
GWR <- SpatialRegressionSimulation(method_name=method_names[2],
n_obs = n_obs, n_sim = n_sim,
FEMbasis = FEMbasis)
Lattice <- SpatialRegressionSimulation(method_name=method_names[3],
n_obs = n_obs, n_sim = n_sim,
FEMbasis = FEMbasis)
RR_Krig <- SpatialRegressionSimulation(method_name=method_names[4],
n_obs = n_obs, n_sim = n_sim,
FEMbasis = FEMbasis)
folder.name
paste0(foldername_,date_,".RData",sep="")
paste0(folder.name,date_,".RData",sep="")
paste0(folder.name,date_,".RData")
system.file(package = "diffusionMap")
if(system.file(package = "diffusionMap") == "")
devtools::install_github("RonBarry/diffusionMaps")
if(system.file(package = "diffusionMap") == ""){
cat("To install diffusionMap package download the tar.gz file at https://github.com/RonBarry/diffusionMaps\n
run from terminal: R CMD BUILD diffusionMaps_2.0.0.tar.gz")
}
if(system.file(package = "diffusionMap") == ""){
cat("diffusionMap package is not installed.\n Download the tar.gz file at https://github.com/RonBarry/diffusionMaps\n
run from terminal: R CMD BUILD diffusionMaps_2.0.0.tar.gz")
}
if(system.file(package = "diffusionMap") == ""){
cat("diffusionMap package is not installed.\n
Download the tar.gz file at https://github.com/RonBarry/diffusionMaps\n
run from terminal: R CMD BUILD diffusionMaps_2.0.0.tar.gz")
}
library(spatstat)
library(maptools)
library(shp2graph)
library(igraph)
library(rgeos)
library(spam)
library(GWmodel)
library(diffusionMaps)
library(KrigLinCaution)
