Z = obs,
k_max=1500)
output_lattice = nparSmoother(T=T_matrix,
nodelocs = nodes.lattice,
locs = locations.lattice,
Z = obs,
k = output_press$k)
prediction.latt = eval.FEM(FEM(output_lattice[,4], FEMbasis), locations=locs)
Lattice$update_error(y_hat = prediction.latt,
y_true = true_signal[sample_],i,j)
### Reduced Rank Kriging (Ver Hoef) -------------------------------------
matNames = as.character(1:nrow(locs))
rownames(net_dist) = matNames
colnames(net_dist) = matNames
knots = create_knots(locations=locs)
RR.krig = rank_reduced_kriging(obs,
net_dist,
knots,
model=c(F,T,F,F))[[2]]
RR_Krig$update_error(y_hat = RR.krig$cv.pred,
y_true = true_signal[sample_],i,j)
}
}
library(diffusionMaps)
for(j in 1:length(n_obs)){
for(i in 1:n_sim){
sample_ = sample(1:nnodes, size=n_obs[j])
locs = mesh$nodes[sample_,]
obs = observations[sample_]
net_dist = ND[sample_, sample_]
### SR-PDE ### -------------------------------------------------------------
output_CPP = smooth.FEM(observations = obs,
locations = locs,
FEMbasis = FEMbasis,
lambda = lambda,
lambda.selection.criterion = "grid",
lambda.selection.lossfunction = "GCV",
DOF.evaluation = "stochastic") # "stochastic"
y_hat = eval.FEM(output_CPP$fit.FEM, locations = locs)
SR_PDE$update_error(y_hat=y_hat , y_true=true_signal[sample_] , i=i, j=j)
### GWR ### ----------------------------------------------------------------
data_ = data.frame(observations = obs)
Sp.data = SpatialPointsDataFrame(coords = locs,
data = data_)
# ND
bw.ND = bw.gwr(observations ~ 1,
data = Sp.data,
approach="AIC",
kernel="gaussian",
dMat = net_dist)
GWR.ND = gwr.basic(observations ~ 1,
data = Sp.data,
kernel = "gaussian",
bw = bw.ND,
dMat = net_dist)
GWR$update_error(y_hat = GWR.ND$SDF$yhat,
y_true = true_signal[sample_],i,j)
# lattice based method -----------------------------------------------------
# dummy z-coordinates !
locations.lattice = cbind(locs, rep(0, times=n_obs[j]))
output_press = crossvalNparSmoother(T=T_matrix,
nodelocs = nodes.lattice,
locs = locations.lattice,
Z = obs,
k_max=1500)
output_lattice = nparSmoother(T=T_matrix,
nodelocs = nodes.lattice,
locs = locations.lattice,
Z = obs,
k = output_press$k)
prediction.latt = eval.FEM(FEM(output_lattice[,4], FEMbasis), locations=locs)
Lattice$update_error(y_hat = prediction.latt,
y_true = true_signal[sample_],i,j)
### Reduced Rank Kriging (Ver Hoef) -------------------------------------
matNames = as.character(1:nrow(locs))
rownames(net_dist) = matNames
colnames(net_dist) = matNames
knots = create_knots(locations=locs)
RR.krig = rank_reduced_kriging(obs,
net_dist,
knots,
model=c(F,T,F,F))[[2]]
RR_Krig$update_error(y_hat = RR.krig$cv.pred,
y_true = true_signal[sample_],i,j)
}
}
tmp = as.lattice.fdaPDE(mesh)
nodes.lattice = tmp$nodes.lattice
adj_matrix = tmp$adj_matrix
T_matrix = makeTranMatrix(adj_matrix, M = 0.5)
# Loop -------------------------------------------------------------------------
for(j in 1:length(n_obs)){
for(i in 1:n_sim){
sample_ = sample(1:nnodes, size=n_obs[j])
locs = mesh$nodes[sample_,]
obs = observations[sample_]
net_dist = ND[sample_, sample_]
### SR-PDE ### -------------------------------------------------------------
output_CPP = smooth.FEM(observations = obs,
locations = locs,
FEMbasis = FEMbasis,
lambda = lambda,
lambda.selection.criterion = "grid",
lambda.selection.lossfunction = "GCV",
DOF.evaluation = "stochastic") # "stochastic"
y_hat = eval.FEM(output_CPP$fit.FEM, locations = locs)
SR_PDE$update_error(y_hat=y_hat , y_true=true_signal[sample_] , i=i, j=j)
### GWR ### ----------------------------------------------------------------
data_ = data.frame(observations = obs)
Sp.data = SpatialPointsDataFrame(coords = locs,
data = data_)
# ND
bw.ND = bw.gwr(observations ~ 1,
data = Sp.data,
approach="AIC",
kernel="gaussian",
dMat = net_dist)
GWR.ND = gwr.basic(observations ~ 1,
data = Sp.data,
kernel = "gaussian",
bw = bw.ND,
dMat = net_dist)
GWR$update_error(y_hat = GWR.ND$SDF$yhat,
y_true = true_signal[sample_],i,j)
# lattice based method -----------------------------------------------------
# dummy z-coordinates !
locations.lattice = cbind(locs, rep(0, times=n_obs[j]))
output_press = crossvalNparSmoother(T=T_matrix,
nodelocs = nodes.lattice,
locs = locations.lattice,
Z = obs,
k_max=1500)
output_lattice = nparSmoother(T=T_matrix,
nodelocs = nodes.lattice,
locs = locations.lattice,
Z = obs,
k = output_press$k)
prediction.latt = eval.FEM(FEM(output_lattice[,4], FEMbasis), locations=locs)
Lattice$update_error(y_hat = prediction.latt,
y_true = true_signal[sample_],i,j)
### Reduced Rank Kriging (Ver Hoef) -------------------------------------
matNames = as.character(1:nrow(locs))
rownames(net_dist) = matNames
colnames(net_dist) = matNames
knots = create_knots(locations=locs)
RR.krig = rank_reduced_kriging(obs,
net_dist,
knots,
model=c(F,T,F,F))[[2]]
RR_Krig$update_error(y_hat = RR.krig$cv.pred,
y_true = true_signal[sample_],i,j)
}
}
setwd("SpatialRegression/")
graphics.off()
rm(list=ls())
# Spatial Regression over Linear Networks --------------------------------------
setwd("SpatialRegression/")
# loading packages and auxiliary functions
source("packages.R")
source("../utils.R")
source("../settings.R")
source("../plot.R")
source("../Simulation.R")
source("create_knots.R")
source("rank_reduced_kriging.R")
tests.names = c("test_1", "test_2", "test_3")
ntest = 1
# available domains
domains = c("estevan", "ontario",  "simplenet")
# Competing methods (available in spatstat package) ----------------------------
method_names = c("SR-PDE", "Lattice", "GWR", "RR-Krig")
methods = c(T,T,T,T)
# Fixing domain ----------------------------------------------------------------
sett = setting(domains[ntest])
mesh = sett$mesh
FEMbasis = sett$FEMbasis
nnodes = sett$nnodes
spatstat.linnet = sett$spatstat.linnet
plot(mesh, linewidth=0.75)
plot(spatstat.linnet)
# Test Hyperparameters ---------------------------------------------------------
if(ntest==1){
n_obs = as.integer(c(50, 75, 100, 150))
lambda = 10^seq(from=-5,to=0.,length.out=20)
n_sim = 1L
}
if(ntest==2){
n = c(100, 250, 500, 1000)
sources = c(32, 185, 400)
}
if(ntest==3){
n = c(50, 100, 150, 250) # numbers of occurences
sources = c(6,8)
}
set.seed(1234)
## Building true signal --------------------------------------------------------
# in ../utils.R
ND = compute_dist_matrix(points1= mesh$nodes,
points2 = mesh$nodes,
L =spatstat.linnet)
# aux_test is defined in settings.R
sample.idx =c(2378, 1271, 1802, 63)
field = aux_test_regression(ND,source = sample.idx[1], sigma=0.1)
field.2 = aux_test_regression(ND,source = sample.idx[2], sigma=0.125)
field.3 = aux_test_regression(ND,source = sample.idx[3], sigma=0.1)
field.4 = aux_test_regression(ND,source = sample.idx[4], sigma=0.25)
true_signal <- field + field.2 + field.3 + field.4
plot(FEM(true_signal, FEMbasis), linewidth=0.75)  + scale_color_viridis()
observations <- true_signal + rnorm(nnodes, mean=0, sd = 0.05*diff(range(true_signal)))
# Building folders -------------------------------------------------------------
date_ = gsub(":","_",gsub(" ","-",Sys.time()))
if(!dir.exists("data/")) {
dir.create("data/")
}
if( !dir.exists(paste("data/", tests.names[ntest],"/",sep=""))){
dir.create(paste("data/", tests.names[ntest],"/",sep=""))
}
folder.name = paste("data/", tests.names[ntest],"/",date_,"/",sep="")
if(!dir.exists(folder.name)) {
dir.create(folder.name)
}
# SR-PDE -----------------------------------------------------------------------
SR_PDE <- SpatialRegressionSimulation(method_name=method_names[1],
n_obs = n_obs, n_sim = n_sim,
FEMbasis = FEMbasis)
# GWR -- -----------------------------------------------------------------------
GWR <- SpatialRegressionSimulation(method_name=method_names[2],
n_obs = n_obs, n_sim = n_sim,
FEMbasis = FEMbasis)
# Lattice method ---------------------------------------------------------------
tmp = as.lattice.fdaPDE(mesh)
nodes.lattice = tmp$nodes.lattice
adj_matrix = tmp$adj_matrix
T_matrix = makeTranMatrix(adj_matrix, M = 0.5)
Lattice <- SpatialRegressionSimulation(method_name=method_names[3],
n_obs = n_obs, n_sim = n_sim,
FEMbasis = FEMbasis)
# Reduced Rank Kriging ---------------------------------------------------------
RR_Krig <- SpatialRegressionSimulation(method_name=method_names[4],
n_obs = n_obs, n_sim = n_sim,
FEMbasis = FEMbasis)
# Loop -------------------------------------------------------------------------
for(j in 1:length(n_obs)){
for(i in 1:n_sim){
sample_ = sample(1:nnodes, size=n_obs[j])
locs = mesh$nodes[sample_,]
obs = observations[sample_]
net_dist = ND[sample_, sample_]
### SR-PDE ### -------------------------------------------------------------
output_CPP = smooth.FEM(observations = obs,
locations = locs,
FEMbasis = FEMbasis,
lambda = lambda,
lambda.selection.criterion = "grid",
lambda.selection.lossfunction = "GCV",
DOF.evaluation = "stochastic") # "stochastic"
y_hat = eval.FEM(output_CPP$fit.FEM, locations = locs)
SR_PDE$update_error(y_hat=y_hat , y_true=true_signal[sample_] , i=i, j=j)
### GWR ### ----------------------------------------------------------------
data_ = data.frame(observations = obs)
Sp.data = SpatialPointsDataFrame(coords = locs,
data = data_)
# ND
bw.ND = bw.gwr(observations ~ 1,
data = Sp.data,
approach="AIC",
kernel="gaussian",
dMat = net_dist)
GWR.ND = gwr.basic(observations ~ 1,
data = Sp.data,
kernel = "gaussian",
bw = bw.ND,
dMat = net_dist)
GWR$update_error(y_hat = GWR.ND$SDF$yhat,
y_true = true_signal[sample_],i,j)
# lattice based method -----------------------------------------------------
# dummy z-coordinates !
locations.lattice = cbind(locs, rep(0, times=n_obs[j]))
output_press = crossvalNparSmoother(T=T_matrix,
nodelocs = nodes.lattice,
locs = locations.lattice,
Z = obs,
k_max=1500)
output_lattice = nparSmoother(T=T_matrix,
nodelocs = nodes.lattice,
locs = locations.lattice,
Z = obs,
k = output_press$k)
prediction.latt = eval.FEM(FEM(output_lattice[,4], FEMbasis), locations=locs)
Lattice$update_error(y_hat = prediction.latt,
y_true = true_signal[sample_],i,j)
### Reduced Rank Kriging (Ver Hoef) -------------------------------------
matNames = as.character(1:nrow(locs))
rownames(net_dist) = matNames
colnames(net_dist) = matNames
knots = create_knots(locations=locs)
RR.krig = rank_reduced_kriging(obs,
net_dist,
knots,
model=c(F,T,F,F))[[2]]
RR_Krig$update_error(y_hat = RR.krig$cv.pred,
y_true = true_signal[sample_],i,j)
}
}
SR_PDE$compute_mean_field(1L)
# Loop -------------------------------------------------------------------------
for(j in 1:length(n_obs)){
for(i in 1:n_sim){
sample_ = sample(1:nnodes, size=n_obs[j])
locs = mesh$nodes[sample_,]
obs = observations[sample_]
net_dist = ND[sample_, sample_]
### SR-PDE ### -------------------------------------------------------------
output_CPP = smooth.FEM(observations = obs,
locations = locs,
FEMbasis = FEMbasis,
lambda = lambda,
lambda.selection.criterion = "grid",
lambda.selection.lossfunction = "GCV",
DOF.evaluation = "stochastic") # "stochastic"
y_hat = eval.FEM(output_CPP$fit.FEM, locations = locs)
SR_PDE$update_estimate(estimate = output_CPP$fit.FEM,i = i, j=j)
SR_PDE$update_error(y_hat=y_hat , y_true=true_signal[sample_] , i=i, j=j)
### GWR ### ----------------------------------------------------------------
data_ = data.frame(observations = obs)
Sp.data = SpatialPointsDataFrame(coords = locs,
data = data_)
# ND
bw.ND = bw.gwr(observations ~ 1,
data = Sp.data,
approach="AIC",
kernel="gaussian",
dMat = net_dist)
GWR.ND = gwr.basic(observations ~ 1,
data = Sp.data,
kernel = "gaussian",
bw = bw.ND,
dMat = net_dist)
GWR$update_error(y_hat = GWR.ND$SDF$yhat,
y_true = true_signal[sample_],i,j)
# lattice based method -----------------------------------------------------
# dummy z-coordinates !
locations.lattice = cbind(locs, rep(0, times=n_obs[j]))
output_press = crossvalNparSmoother(T=T_matrix,
nodelocs = nodes.lattice,
locs = locations.lattice,
Z = obs,
k_max=1500)
output_lattice = nparSmoother(T=T_matrix,
nodelocs = nodes.lattice,
locs = locations.lattice,
Z = obs,
k = output_press$k)
prediction.latt = eval.FEM(FEM(output_lattice[,4], FEMbasis), locations=locs)
Lattice$update_error(y_hat = prediction.latt,
y_true = true_signal[sample_],i,j)
### Reduced Rank Kriging (Ver Hoef) -------------------------------------
matNames = as.character(1:nrow(locs))
rownames(net_dist) = matNames
colnames(net_dist) = matNames
knots = create_knots(locations=locs)
RR.krig = rank_reduced_kriging(obs,
net_dist,
knots,
model=c(F,T,F,F))[[2]]
RR_Krig$update_error(y_hat = RR.krig$cv.pred,
y_true = true_signal[sample_],i,j)
}
SR_PDE$compute_mean_field(j)
}
SR_PDE$plot_mean_field(1L)
SR_PDE$plot_mean_field(2L)
SimulationBlock <- BlockSimulation(list(SR_PDE, GWR, Lattice, RR_Krig))
boxplot(SimulationBlock)
SimulationBlock$method_names
order_ <- sort(unique(SimulationBlock$method),decreasing = T)
order_ <- sort(unique(SimulationBlock$method_names),decreasing = T)
order_
SimulationBlock$method_names
order_ <- SimulationBlock$method_names[c(1,3,2,1)]
order_
x = SimulationBlock
order_
ORDER = order_
x$methods_name <- factor(x$methods_name, levels= ORDER)
x$method_names <- factor(x$methods_name, levels= ORDER)
x$method_names <- factor(x$method_names, levels= ORDER)
x$method_names
x$results
as.factor(x$results, levels=ORDER)
ORDER
factor(x$method_names, levels= ORDER)
ORDER
order_
x$method_names
ORDER <- x$method_names[c(1,3,2,4)]
ORDER
x$method_names <- factor(x$method_names, levels= ORDER)
x$method_names <- as.factor(x$method_names)
x$method_names
x$results$method_names <- factor(x$results$method, levels= ORDER)
begin=0.25
end=0.95
border_col = darken(viridis(length(x$method_names), begin=begin,end=end), amount=0.25)
fill_col = viridis(length(x$method_names), begin=begin, end=end)
BORDER = c()
FILL = c()
for(i in 1:length(x$method_names)){
FILL = append(FILL, fill_col[i])
BORDER = append(BORDER, border_col[i])
}
ggFILL <-scale_fill_manual(values = FILL)
ggBORDER <- scale_color_manual(values= BORDER)
p<-ggplot(x$results)+
geom_boxplot(aes(x=n_obs,
y=errors, group=interaction(method,n_obs),
fill=method, color = method))+
scale_x_discrete(limits=as.character(n_obs))+
labs(x="", y="") +
theme(
axis.ticks.x = element_blank(),
legend.position = c(0.85,0.85),
legend.background = element_rect(fill="white", color="black",
linewidth =c(1,0.5)),
legend.title = element_blank())
p + ggFILL + ggBORDER
ORDER
x$results$method <- factor(x$results$method, levels= ORDER)
setMethod("boxplot", "BlockSimulation", function(x, ORDER ,...){
ORDER <- x$methods_name[ORDER]
x$results$method <- factor(x$results$method, levels= ORDER)
begin=0.25
end=0.95
border_col = darken(viridis(length(x$method_names), begin=begin,end=end), amount=0.25)
fill_col = viridis(length(x$method_names), begin=begin, end=end)
BORDER = c()
FILL = c()
for(i in 1:length(x$method_names)){
FILL = append(FILL, fill_col[i])
BORDER = append(BORDER, border_col[i])
}
ggFILL <-scale_fill_manual(values = FILL)
ggBORDER <- scale_color_manual(values= BORDER)
p<-ggplot(x$results)+
geom_boxplot(aes(x=n_obs,
y=errors, group=interaction(method,n_obs),
fill=method, color = method))+
scale_x_discrete(limits=as.character(n_obs))+
labs(x="", y="") +
theme(
axis.ticks.x = element_blank(),
legend.position = c(0.85,0.85),
legend.background = element_rect(fill="white", color="black",
linewidth =c(1,0.5)),
legend.title = element_blank())
p + ggFILL + ggBORDER
})
boxplot(SimulationBlock)
setMethod("boxplot", "BlockSimulation", function(x, ORDER=NULL ,...){
if(!is.null(ORDER)){
ORDER <- x$method_names[ORDER]
x$results$method <- factor(x$results$method, levels= ORDER)
begin=0.25
end=0.95
border_col = darken(viridis(length(x$method_names), begin=begin,end=end), amount=0.25)
fill_col = viridis(length(x$method_names), begin=begin, end=end)
BORDER = c()
FILL = c()
for(i in 1:length(x$method_names)){
FILL = append(FILL, fill_col[i])
BORDER = append(BORDER, border_col[i])
}
ggFILL <-scale_fill_manual(values = FILL)
ggBORDER <- scale_color_manual(values= BORDER)
}
p<-ggplot(x$results)+
geom_boxplot(aes(x=n_obs,
y=errors, group=interaction(method,n_obs),
fill=method, color = method))+
scale_x_discrete(limits=as.character(n_obs))+
labs(x="", y="") +
theme(
axis.ticks.x = element_blank(),
legend.position = c(0.85,0.85),
legend.background = element_rect(fill="white", color="black",
linewidth =c(1,0.5)),
legend.title = element_blank())
if(!is.null(ORDER)){
p <- p + ggFILL + ggBORDER
}
p
})
boxplot(SimulationBlock)
boxplot(SimulationBlock, ORDER=c(1,2,3,4))
SimulationBlock$results
SimulationBlock$results$method
x$method_names
SimulationBlock$method_names
ORDER = c(1,3,2,4)
boxplot(SimulationBlock, ORDER)
SimulationBlock <- BlockSimulation(list(SR_PDE, GWR))
SimulationBlock$method_names
GWR$method_name
boxplot(SimulationBlock)
ORDER = c(2,1)
boxplot(SimulationBlock,ORDER)
SimulationBlock$method_names
SimulationBlock$method_names
ORDER = c(1,2)
boxplot(SimulationBlock,ORDER)
SimulationBlock$results
